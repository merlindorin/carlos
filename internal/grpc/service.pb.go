// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal/protos/service.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_0be14e58db90a7a2, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Empty)(nil), "service.Empty")
}

func init() { proto.RegisterFile("internal/protos/service.proto", fileDescriptor_0be14e58db90a7a2) }

var fileDescriptor_0be14e58db90a7a2 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0x80, 0x40,
	0x10, 0x86, 0x95, 0x32, 0x69, 0xca, 0xa2, 0x3d, 0x4a, 0x5d, 0x3c, 0x88, 0x27, 0x15, 0xeb, 0x09,
	0x0c, 0x6f, 0x06, 0x41, 0xb7, 0x6e, 0x9b, 0x0d, 0x8b, 0x94, 0x3b, 0x32, 0x8a, 0xe1, 0xab, 0xf5,
	0x74, 0xd1, 0xea, 0x1a, 0x98, 0xc7, 0x6f, 0xf9, 0xfe, 0x7f, 0x87, 0x1f, 0xee, 0x5a, 0x3d, 0x22,
	0x6b, 0xf9, 0x99, 0xf5, 0x4c, 0x23, 0x0d, 0xd9, 0x80, 0x3c, 0xb5, 0x0d, 0xa6, 0x06, 0x85, 0xbf,
	0x62, 0x78, 0xbb, 0xf7, 0xde, 0xa9, 0x93, 0xad, 0x5e, 0xb4, 0xc8, 0x07, 0xaf, 0xea, 0xfa, 0x71,
	0x2e, 0xbe, 0x5d, 0x80, 0x47, 0xc9, 0x2f, 0x4b, 0x4a, 0x24, 0xe0, 0x3d, 0xd3, 0x17, 0xb2, 0x08,
	0xd2, 0xd5, 0x37, 0x18, 0x5e, 0xa5, 0xf6, 0x1b, 0x13, 0x8b, 0x1c, 0x91, 0xc3, 0x79, 0xd5, 0x21,
	0x2b, 0xd4, 0xcd, 0x2c, 0x6e, 0xac, 0xbd, 0x3d, 0x1d, 0x24, 0x12, 0xf0, 0x4a, 0x96, 0x1f, 0xf8,
	0xd7, 0x6d, 0xf0, 0xc0, 0x8c, 0xe1, 0xf4, 0x89, 0x26, 0x14, 0x97, 0x56, 0xfc, 0xa5, 0xff, 0x5e,
	0xf1, 0x00, 0x50, 0x93, 0xb2, 0xb7, 0xc7, 0x70, 0x52, 0x93, 0x12, 0x3b, 0x2d, 0xbc, 0xb0, 0x25,
	0x35, 0xa9, 0xc8, 0xc9, 0xdd, 0xf2, 0xfa, 0x35, 0xd8, 0xb6, 0x51, 0xdc, 0x37, 0x6f, 0x67, 0x66,
	0x93, 0xfb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x68, 0xcc, 0xdc, 0x5b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CarServiceClient is the client API for CarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CarServiceClient interface {
	Power(ctx context.Context, in *Power, opts ...grpc.CallOption) (*Empty, error)
	Emergency(ctx context.Context, in *Emergency, opts ...grpc.CallOption) (*Empty, error)
	Brake(ctx context.Context, in *Brake, opts ...grpc.CallOption) (*Empty, error)
	Move(ctx context.Context, in *Move, opts ...grpc.CallOption) (*Empty, error)
}

type carServiceClient struct {
	cc *grpc.ClientConn
}

func NewCarServiceClient(cc *grpc.ClientConn) CarServiceClient {
	return &carServiceClient{cc}
}

func (c *carServiceClient) Power(ctx context.Context, in *Power, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/service.CarService/Power", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) Emergency(ctx context.Context, in *Emergency, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/service.CarService/Emergency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) Brake(ctx context.Context, in *Brake, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/service.CarService/Brake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) Move(ctx context.Context, in *Move, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/service.CarService/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarServiceServer is the server API for CarService service.
type CarServiceServer interface {
	Power(context.Context, *Power) (*Empty, error)
	Emergency(context.Context, *Emergency) (*Empty, error)
	Brake(context.Context, *Brake) (*Empty, error)
	Move(context.Context, *Move) (*Empty, error)
}

// UnimplementedCarServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCarServiceServer struct {
}

func (*UnimplementedCarServiceServer) Power(ctx context.Context, req *Power) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Power not implemented")
}
func (*UnimplementedCarServiceServer) Emergency(ctx context.Context, req *Emergency) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Emergency not implemented")
}
func (*UnimplementedCarServiceServer) Brake(ctx context.Context, req *Brake) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Brake not implemented")
}
func (*UnimplementedCarServiceServer) Move(ctx context.Context, req *Move) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}

func RegisterCarServiceServer(s *grpc.Server, srv CarServiceServer) {
	s.RegisterService(&_CarService_serviceDesc, srv)
}

func _CarService_Power_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Power)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).Power(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CarService/Power",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).Power(ctx, req.(*Power))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_Emergency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Emergency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).Emergency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CarService/Emergency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).Emergency(ctx, req.(*Emergency))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_Brake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Brake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).Brake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CarService/Brake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).Brake(ctx, req.(*Brake))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Move)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CarService/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).Move(ctx, req.(*Move))
	}
	return interceptor(ctx, in, info, handler)
}

var _CarService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.CarService",
	HandlerType: (*CarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Power",
			Handler:    _CarService_Power_Handler,
		},
		{
			MethodName: "Emergency",
			Handler:    _CarService_Emergency_Handler,
		},
		{
			MethodName: "Brake",
			Handler:    _CarService_Brake_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _CarService_Move_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/protos/service.proto",
}

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogServiceClient interface {
	Log(ctx context.Context, in *Empty, opts ...grpc.CallOption) (LogService_LogClient, error)
}

type logServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogServiceClient(cc *grpc.ClientConn) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) Log(ctx context.Context, in *Empty, opts ...grpc.CallOption) (LogService_LogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogService_serviceDesc.Streams[0], "/service.LogService/Log", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogService_LogClient interface {
	Recv() (*Log, error)
	grpc.ClientStream
}

type logServiceLogClient struct {
	grpc.ClientStream
}

func (x *logServiceLogClient) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServiceServer is the server API for LogService service.
type LogServiceServer interface {
	Log(*Empty, LogService_LogServer) error
}

// UnimplementedLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (*UnimplementedLogServiceServer) Log(req *Empty, srv LogService_LogServer) error {
	return status.Errorf(codes.Unimplemented, "method Log not implemented")
}

func RegisterLogServiceServer(s *grpc.Server, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_Log_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).Log(m, &logServiceLogServer{stream})
}

type LogService_LogServer interface {
	Send(*Log) error
	grpc.ServerStream
}

type logServiceLogServer struct {
	grpc.ServerStream
}

func (x *logServiceLogServer) Send(m *Log) error {
	return x.ServerStream.SendMsg(m)
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Log",
			Handler:       _LogService_Log_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/protos/service.proto",
}
